[{"id":"35ff2ec4afc38c00b586be532d96a96f","title":"计算机组成原理笔记（一）","content":"CPU性能响应时间：指的就是，我们执行一个程序，到底需要花多少时间。花的时间越少，自然性能就越好。\n吞吐率：在一定的时间范围内，到底能处理多少事情。这里的“事情”，在计算机里就是处理的数据或者执行的程序指令。\n我们一般把性能，定义成响应时间的倒数，也就是：\n性能 &#x3D; 1&#x2F;响应时间\n\n程序运行的时间程序运行的时间&#x3D;程序运行结束的时间-程序开始运行的时间\n\n但是，计算机可能同时运行着好多个程序，CPU实际上不停地在各个程序之间进行切换。在这些走掉的时间里面，很可能CPU切换去运行别的程序了。所以这个时间并不准。\n我们使用time命令统计运行时间：\n$ time seq\n  1000000 | wc -l \n1000000 \nreal 0m0.101s \nuser 0m0.031s \nsys  0m0.016s\n\n其中real就是Wall Clock Time，而程序实际花费的CPU执行时间，就是user time加上sys time。\n我们下面对程序的CPU执行时间进行拆解：\n程序的CPU执行时间&#x3D;CPU时钟周期数×时钟周期时间\n\n时钟周期时间：如果一台电脑的主频是2.8GHz，那么可以简单认为，CPU在1秒时间内，可以执行的简单指令的数量是2.8G条。在这个2.8GHz的CPU上，这个时钟周期时间，就是1&#x2F;2.8G。\n对于上面的公式：CPU时钟周期数还可以拆解成指令数×每条指令的平均时钟周期数Cycles Per Instruction，简称CPI）。\n程序的CPU执行时间&#x3D;指令数×CPI×Clock Cycle Time\n\n并行优化由于通过提升CPU频率已经达到瓶颈，所以开始推出多核CPU，通过提升“吞吐率”而不是“响应时间”，来达到目的。\n但是，并不是所有问题，都可以通过并行提高性能来解决。如果想要使用这种思想，需要满足这样几个条件。\n1、需要进行的计算，本身可以分解成几个可以并行的任务。2、需要能够分解好问题，并确保几个人的结果能够汇总到一起。3、在“汇总”这个阶段，是没有办法并行进行的，还是得顺序执行，一步一步来。\n所以并行计算涉及到了一个阿姆达尔定律（Amdahl’s Law）。\n对于一个程序进行优化之后，处理器并行运算之后效率提升的情况。具体可以用这样一个公式来表示：\n优化后的执行时间 &#x3D; 受优化影响的执行时间&#x2F;加速倍数+不受影响的执行时间\n比如做一段数据的计算， 本来如果整个计算单核完成需要120ns，但是我们可以将这个任务拆分成4个，最后再汇总加起来。\n如果每个任务单独计算需要25ns，加起来汇总需要20ns，那么4个任务并行计算需要100&#x2F;4+20&#x3D;25ns。\n即使我们增加更多的并行度来提供加速倍数，比如有100个CPU，整个时间也需要100&#x2F;100+20&#x3D;21ns。\n\n","slug":"first-new-page","date":"2022-07-05T07:02:41.000Z","categories_index":"","tags_index":"计组原、网络","author_index":"网工混子"}]