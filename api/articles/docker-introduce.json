{"title":"Docker介绍","uid":"85ab71e52051db561aa2a8f46a8893b4","slug":"docker-introduce","date":"2022-07-06T01:12:31.000Z","updated":"2022-07-08T19:58:24.396Z","comments":true,"path":"api/articles/docker-introduce.json","keywords":null,"cover":"/img/cover-docker-1.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"什么是Docker？\"><a href=\"#什么是Docker？\" class=\"headerlink\" title=\"什么是Docker？\"></a>什么是Docker？</h3><p>Docker是世界领先的软件容器平台，所以想要搞懂Docker的概念我们必须先从容器开始说起。容器是完全使用沙箱机制，相互之间不会有任何接口,容器性能开销极低。</p>\n<p>Docker是虚拟化技术的一种，利用Linux核心中的资源分脱机制，例如 cgroups，以及 Linux 核心名字空间（name space），来创建独立的软件容器（containers），属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。Docker 在容器的基础上进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护，使得其比虚拟机技术更为轻便、快捷。Docker 可以在单一Linux实体下运作，避免因为创建一个虚拟机而造成的额外负担。</p>\n<h3 id=\"Docker与虚拟化\"><a href=\"#Docker与虚拟化\" class=\"headerlink\" title=\"Docker与虚拟化\"></a>Docker与虚拟化</h3><p>“虚拟化”是一项技术，也是一种资源解决方案。虚拟化技术是将物理资源转变为逻辑上可以管理的资源，以打破物理结构之间的壁垒，使计算元件运行在虚拟的基础上，而不是真实的物理资源上。通过虚拟化技术，可以将物理资源转变为<em><strong>逻辑资源</strong></em>（虚拟机），应用程序服务运行在虚拟资源上，而不是真实的物理机上。</p>\n<p>虚拟化技术的落地，底层就必须有物理机支撑。单纯的物理机是不能直接虚拟化的，都需要虚拟化软件来实现。目前主流的虚拟化软件有：<em><strong>KVM，XEN，ESXI，HP-V，Docker，Virtual BOX等</strong></em>。</p>\n<h3 id=\"虚拟化技术的应用场景\"><a href=\"#虚拟化技术的应用场景\" class=\"headerlink\" title=\"虚拟化技术的应用场景\"></a>虚拟化技术的应用场景</h3><p>企业需求：部署一百套Nginx WEB服务，要求对外端口为80，要求独立服务器部署</p>\n<p>1、<strong>传统方案</strong>：采购一百台低配硬件物理机，每台物理机部署一套Nginx WEB服务</p>\n<p>2、<strong>虚拟化方案</strong>：采购10台高配硬件物理机，每台物理机虚拟10台虚拟机，每台虚拟机独立部署一套Nginx WEB服务</p>\n<p>第二种方案从成本、部署难度、维护等方面，第二种都是比第一种要好。</p>\n<p>虚拟化的意义在于：<strong>对于硬件设备资源的最大化利用，降低企业各种费用成本，简化后期资源部署和维护，动态满足企业需求，基于虚拟化资源来代替待淘汰的物理资源</strong></p>\n<h3 id=\"Docker虚拟化相比传统虚拟化的优点\"><a href=\"#Docker虚拟化相比传统虚拟化的优点\" class=\"headerlink\" title=\"Docker虚拟化相比传统虚拟化的优点\"></a>Docker虚拟化相比传统虚拟化的优点</h3><p>简单来说： 容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p>\n<p>传统虚拟化技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程。</p>\n<p>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>\n<p><img src=\"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/202207090102045.jpg\"></p>\n<ul>\n<li><p>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动。</p>\n</li>\n<li><p>虚拟机（VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢。</p>\n</li>\n</ul>\n<p>两者有不同的使用场景，虚拟机更擅长于彻底隔离整个运行环境，而Docker通常用于隔离不同的应用。</p>\n<p>容器技术和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。容器内没有自己的内核，也没有进行硬件虚拟。</p>\n<p>具体来说与虚拟机技术对比，Docker 容器存在以下几个特点：</p>\n<p>1、<em><strong>更快的启动速度</strong></em>：因为 Docker 直接运行于宿主内核，无需启动完整的操作系统，因此启动速度属于秒级别，而虚拟机通常需要几分钟去启动。</p>\n<p>2、<em><strong>更高效的资源利用率</strong></em>：由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。</p>\n<p>3、<em><strong>更高的系统支持量</strong></em>：Docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高。</p>\n<p>4、<em><strong>持续交付与部署</strong></em>：对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至进行自动部署。</p>\n<p>5、<em><strong>更轻松的迁移</strong></em>：由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<p>6、<em><strong>更轻松的维护与扩展</strong></em>：Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<p>7、<em><strong>更弱的隔离性</strong></em>：Docker 属于进程之间的隔离，虚拟机可实现系统级别隔离。</p>\n<p>8、<em><strong>更弱的安全性</strong></em>：Docker 的租户 root 和宿主机 root 等同，一旦容器内的用户从普通用户权限提升为 root 权限，它就直接具备了宿主机的 root 权限，进而可进行无限制的操作。虚拟机租户 root 权限和宿主机的 root 虚拟机权限是分离的，并且利用硬件隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击。</p>\n<h3 id=\"Docker基本概念\"><a href=\"#Docker基本概念\" class=\"headerlink\" title=\"Docker基本概念\"></a>Docker基本概念</h3><p>Docker包括三个基本概念：</p>\n<ul>\n<li>镜像（Image）</li>\n<li>容器（Container）</li>\n<li>仓库（Repository）</li>\n</ul>\n<p><em><strong>镜像（Image）——一个特殊的文件系统</strong></em></p>\n<p>操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像（Image），就相当于是一个root文件系统。</p>\n<p>Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>Docker设计时，就充分利用Union FS的技术，将其设计为分层存储的架构。 镜像实际是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<p><em><strong>容器（Container）——镜像运行时的实体</strong></em></p>\n<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。</p>\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</p>\n<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照Docker最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<p><em><strong>仓库（Repository）——集中存放镜像文件的地方</strong></em></p>\n<p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>一个Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</p>\n<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。</p>\n<h3 id=\"Docker三剑客\"><a href=\"#Docker三剑客\" class=\"headerlink\" title=\"Docker三剑客\"></a>Docker三剑客</h3><p><em><strong>docker-compose</strong></em>：Docker 镜像在创建之后，往往需要自己手动 pull 来获取镜像，然后执行 run 命令来运行。当服务需要用到多种容器，容器之间又产生了各种依赖和连接的时候，部署一个服务的手动操作是令人感到十分厌烦的。</p>\n<p>dcoker-compose 技术，就是通过一个 .yml 配置文件，将所有的容器的部署方法、文件映射、容器连接等等一系列的配置写在一个配置文件里，最后只需要执行 docker-compose up 命令就会像执行脚本一样的去一个个安装容器并自动部署他们，极大的便利了复杂服务的部署。</p>\n<p><em><strong>docker-machine</strong></em>：Docker 技术是基于 Linux 内核的 cgroup 技术实现的，那么问题来了，在非 Linux 平台上是否就不能使用 docker 技术了呢？答案是可以的，不过显然需要借助虚拟机去模拟出 Linux 环境来。</p>\n<p>docker-machine 就是 docker 公司官方提出的，用于在各种平台上快速创建具有 docker 服务的虚拟机的技术，甚至可以通过指定 driver 来定制虚拟机的实现原理（一般是 virtualbox）。</p>\n<p><em><strong>docker-swarm</strong></em>：swarm 是基于 docker 平台实现的集群技术， 他可以通过几条简单的指令快速的创建一个 docker 集群，接着在集群的共享网络上部署应用，最终实现分布式的服务。</p>\n<h3 id=\"Docker的基本组成\"><a href=\"#Docker的基本组成\" class=\"headerlink\" title=\"Docker的基本组成\"></a>Docker的基本组成</h3><p>1、ocker Client 客户端</p>\n<p>2、Docker Daemon 守护进程</p>\n<p>3、Docker Image 镜像</p>\n<p>4、Docker Container 容器</p>\n<p>5、Docker Registry 仓库</p>\n<p><img src=\"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/202207090114341.jpg\"></p>\n<p>docker镜像是一个层叠的只读文件系统(联合文件系统)：</p>\n<p>最低端是一个引导文件系统 bootfs</p>\n<p>第二层是rootfs，位于引导文件系统之上，可以是一种或多种操作系统(redhat&#x2F;ubuntu等)，在docker中，rootfs永远是只读方式，并且利用联合加载技术(union mount)，加载更多的只读文件系统</p>\n<p><img src=\"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/202207090114793.png\"></p>\n<h4 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h4><p>docker容器通过docker镜像启动，是Docker镜像运行的实体，是活动的。</p>\n<p>当一个容器启动时，会再docker镜像的最顶层加载一个读写文件系统，docker中运行的程序就是在该层进行运行的，第一次启动是，初始化的读写层是空的，所有的写操作都应用在该层(从只读的底层复制到读写层[写时复制技术])</p>\n<p>Docker镜像和容器的关系，跟程序和进程的关系类似</p>\n<h4 id=\"Docker仓库\"><a href=\"#Docker仓库\" class=\"headerlink\" title=\"Docker仓库\"></a>Docker仓库</h4><p>存放Docker镜像的地方，一般分为公共仓库和私有仓库，docker公司提供了一个自己的仓库”Docker Hub”</p>\n<h3 id=\"Docker的相关技术\"><a href=\"#Docker的相关技术\" class=\"headerlink\" title=\"Docker的相关技术\"></a>Docker的相关技术</h3><p>Docker依赖Linux的内核特性有：<em><strong>Cgroup</strong></em>(控制组)和<em><strong>Namespace</strong></em>(命名空间)</p>\n<h4 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h4><p>命名空间是一种封装的概念，在操作系统层面上，提供了系统资源的隔离，系统资源包括{进程、文件系统、网络等}。Linux实现命名空间的目的：为了实现轻量级虚拟化服务，在不同命名空间下的进程，彼此毫无关系。</p>\n<h5 id=\"docker使用了五种命名空间：\"><a href=\"#docker使用了五种命名空间：\" class=\"headerlink\" title=\"docker使用了五种命名空间：\"></a>docker使用了五种命名空间：</h5><ul>\n<li><p>PID <em><strong>进程隔离</strong></em></p>\n</li>\n<li><p>NET <em><strong>管理网络接口</strong></em></p>\n</li>\n<li><p>IPC <em><strong>管理进程间通信</strong></em></p>\n</li>\n<li><p>MNT <em><strong>管理挂载点，文件系统间的隔离</strong></em></p>\n</li>\n<li><p>UTS <em><strong>管理内核和版本标示的隔离</strong></em></p>\n</li>\n</ul>\n<h4 id=\"Cgroup\"><a href=\"#Cgroup\" class=\"headerlink\" title=\"Cgroup\"></a>Cgroup</h4><p>Cgroup对隔离的资源进行管理，是一种用来限制、记录，隔离进程组资源的机制。就是为了容器技术而生的。</p>\n<h5 id=\"Cgroup对资源的管理方式\"><a href=\"#Cgroup对资源的管理方式\" class=\"headerlink\" title=\"Cgroup对资源的管理方式\"></a>Cgroup对资源的管理方式</h5><p><em><strong>资源限制</strong></em> 如：对内存的分配上限</p>\n<p><em><strong>优先级设定</strong></em> 如：某个进程优先使用cpu时间片</p>\n<p><em><strong>资源计量</strong></em> 计算进程组使用了多少系统资源，尤其时在记费系统中</p>\n<p><em><strong>资源控制</strong></em> 将进程组挂起或恢复</p>\n<h4 id=\"Docker容器的能力\"><a href=\"#Docker容器的能力\" class=\"headerlink\" title=\"Docker容器的能力\"></a>Docker容器的能力</h4><p><em><strong>文件系统隔离</strong></em>：每个容器都有自己的root文件系统</p>\n<p><em><strong>进程隔离</strong></em>：每个容器都运行在自己的进程环境中，互相不影响</p>\n<p><em><strong>网络隔离</strong></em>：容器间的虚拟网络接口和IP地址都是分开的</p>\n<p><em><strong>资源隔离和分组</strong></em>：使用Cgroups将CPU和内存之类的物理资源独立的分配给每个Docker容器</p>\n","feature":true,"text":"什么是Docker？Docker是世界领先的软件容器平台，所以想要搞懂Docker的概念我们必须先从容器开始说起。容器是完全使用沙箱机制，相互之间不会有任何接口,容器性能开销极低。 Docker是虚拟化技术的一种，利用Linux核心中的资源分脱机制，例如 cgroups，以及 L...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"},{"name":"Linux","slug":"Docker/Linux","count":1,"path":"api/categories/Docker/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFDocker%EF%BC%9F\"><span class=\"toc-text\">什么是Docker？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%8C%96\"><span class=\"toc-text\">Docker与虚拟化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">虚拟化技术的应用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">Docker虚拟化相比传统虚拟化的优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Docker基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E4%B8%89%E5%89%91%E5%AE%A2\"><span class=\"toc-text\">Docker三剑客</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90\"><span class=\"toc-text\">Docker的基本组成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Docker容器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">Docker仓库</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">Docker的相关技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Namespace\"><span class=\"toc-text\">Namespace</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#docker%E4%BD%BF%E7%94%A8%E4%BA%86%E4%BA%94%E7%A7%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A\"><span class=\"toc-text\">docker使用了五种命名空间：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cgroup\"><span class=\"toc-text\">Cgroup</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Cgroup%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Cgroup对资源的管理方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">Docker容器的能力</span></a></li></ol></li></ol>","author":{"name":"网工的狗","slug":"blog-author","avatar":"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/IMG_2542.jpeg","link":"/","description":"如果没能一次成功，那就叫它1.0版吧 <br /> <br /> <b> No one but you.</b>","socials":{"github":"https://github.com/effygao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/dreamland-81","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://live.bilibili.com/185871311"},"qq":{"icon":"/svg/qq.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=1595291236&site=qq&menu=yes"},"netmusic":{"icon":"/svg/music.svg","link":"https://music.163.com/#/user/home?id=115346351"}}}},"mapped":true,"prev_post":{"title":"OpenStack概览","uid":"24242b49aa34da839d61a817de58ead5","slug":"os-intro","date":"2022-07-16T18:38:34.000Z","updated":"2022-07-16T18:49:44.228Z","comments":true,"path":"api/articles/os-intro.json","keywords":null,"cover":"/img/op.jpg","text":"OpenStack概览OpenStack是开源云操作系统，可控制整个数据中心的大型计算，存储和网络资源池。用户能够通过Web界面、命令行或API接口配置资源。 OpenStack不是虚拟化1、 OpenStack的架构定位与技术范畴 Openstack只是系统的控制面。 Open...","link":"","photos":[],"count_time":{"symbolsCount":618,"symbolsTime":"1 mins."},"categories":[{"name":"OpenStack","slug":"OpenStack","count":1,"path":"api/categories/OpenStack.json"},{"name":"Linux","slug":"OpenStack/Linux","count":1,"path":"api/categories/OpenStack/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"OpenStack","slug":"OpenStack","count":1,"path":"api/tags/OpenStack.json"}],"author":{"name":"网工的狗","slug":"blog-author","avatar":"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/IMG_2542.jpeg","link":"/","description":"如果没能一次成功，那就叫它1.0版吧 <br /> <br /> <b> No one but you.</b>","socials":{"github":"https://github.com/effygao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/dreamland-81","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://live.bilibili.com/185871311"},"qq":{"icon":"/svg/qq.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=1595291236&site=qq&menu=yes"},"netmusic":{"icon":"/svg/music.svg","link":"https://music.163.com/#/user/home?id=115346351"}}}},"feature":true},"next_post":{"title":"Ceph架构简介及使用场景介绍","uid":"73d192d4467e8265f5454c782a51beb8","slug":"ceph-introduce","date":"2022-07-05T15:22:49.000Z","updated":"2022-07-08T20:21:39.510Z","comments":true,"path":"api/articles/ceph-introduce.json","keywords":null,"cover":"/img/ceph-cover.png","text":"Ceph简介Ceph是一个统一的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。 Ceph项目最早起源于Sage就读博士期间的工作（最早的成果于2004年发表），并随后贡献给开源社区。在经过了数年的发展之后，目前已得到众多云计算厂商的支持并被广泛应用。RedHat及O...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"Ceph","slug":"Ceph","count":1,"path":"api/tags/Ceph.json"}],"author":{"name":"网工的狗","slug":"blog-author","avatar":"https://blog-picturecloud.oss-cn-shanghai.aliyuncs.com/img/IMG_2542.jpeg","link":"/","description":"如果没能一次成功，那就叫它1.0版吧 <br /> <br /> <b> No one but you.</b>","socials":{"github":"https://github.com/effygao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/dreamland-81","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://live.bilibili.com/185871311"},"qq":{"icon":"/svg/qq.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=1595291236&site=qq&menu=yes"},"netmusic":{"icon":"/svg/music.svg","link":"https://music.163.com/#/user/home?id=115346351"}}}},"feature":true}}