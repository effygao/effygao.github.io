{"title":"Ceph架构简介及使用场景介绍","uid":"73d192d4467e8265f5454c782a51beb8","slug":"ceph-introduce","date":"2022-07-05T15:22:49.000Z","updated":"2022-07-05T16:15:36.796Z","comments":true,"path":"api/articles/ceph-introduce.json","keywords":null,"cover":"/img/ceph-cover.png","content":"<h2 id=\"1-1-Ceph简介\"><a href=\"#1-1-Ceph简介\" class=\"headerlink\" title=\"1.1 Ceph简介\"></a>1.1 Ceph简介</h2><p>Ceph是一个统一的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。</p>\n<p>Ceph项目最早起源于Sage就读博士期间的工作（最早的成果于2004年发表），并随后贡献给开源社区。在经过了数年的发展之后，目前已得到众多云计算厂商的支持并被广泛应用。RedHat及OpenStack都可与Ceph整合以支持虚拟机镜像的后端存储。</p>\n<h2 id=\"1-2-Ceph特点\"><a href=\"#1-2-Ceph特点\" class=\"headerlink\" title=\"1.2 Ceph特点\"></a>1.2 Ceph特点</h2><ul>\n<li>高性能<br>a. 摒弃了传统的集中式存储元数据寻址的方案，采用CRUSH算法，数据分布均衡，并行度高。<br>b.考虑了容灾域的隔离，能够实现各类负载的副本放置规则，例如跨机房、机架感知等。<br>c. 能够支持上千个存储节点的规模，支持TB到PB级的数据。</li>\n<li>高可用性<br>a. 副本数可以灵活控制。<br>b. 支持故障域分隔，数据强一致性。<br>c. 多种故障场景自动进行修复自愈。<br>d. 没有单点故障，自动管理。</li>\n<li>高可扩展性<br>a. 去中心化。<br>b. 扩展灵活。<br>c. 随着节点增加而线性增长。</li>\n<li>特性丰富<br>a. 支持三种存储接口：块存储、文件存储、对象存储。<br>b. 支持自定义接口，支持多种语言驱动。</li>\n</ul>\n<h2 id=\"1-3-Ceph架构\"><a href=\"#1-3-Ceph架构\" class=\"headerlink\" title=\"1.3 Ceph架构\"></a>1.3 Ceph架构</h2><p><strong>支持三种接口：</strong></p>\n<ul>\n<li>Object：有原生的API，而且也兼容Swift和S3的API。</li>\n<li>Block：支持精简配置、快照、克隆。</li>\n<li>File：Posix接口，支持快照。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/effygao/picture/master/img/ceph1.jpg\"></p>\n<h2 id=\"1-4-Ceph核心组件及概念介绍\"><a href=\"#1-4-Ceph核心组件及概念介绍\" class=\"headerlink\" title=\"1.4 Ceph核心组件及概念介绍\"></a>1.4 Ceph核心组件及概念介绍</h2><ul>\n<li><p>Monitor<br>一个Ceph集群需要多个Monitor组成的小集群，它们通过Paxos同步数据，用来保存OSD的元数据。</p>\n</li>\n<li><p>OSD<br>OSD全称Object Storage Device，也就是负责响应客户端请求返回具体数据的进程。一个Ceph集群一般都有很多个OSD。</p>\n</li>\n<li><p>MDS<br>MDS全称Ceph Metadata Server，是CephFS服务依赖的元数据服务。</p>\n</li>\n<li><p>Object<br>Ceph最底层的存储单元是Object对象，每个Object包含元数据和原始数据。</p>\n</li>\n<li><p>PG<br>PG全称Placement Grouops，是一个逻辑的概念，一个PG包含多个OSD。引入PG这一层其实是为了更好的分配数据和定位数据。</p>\n</li>\n<li><p>RADOS<br>RADOS全称Reliable Autonomic Distributed Object Store，是Ceph集群的精华，用户实现数据分配、Failover等集群操作。</p>\n</li>\n<li><p>Libradio<br>Librados是Rados提供库，因为RADOS是协议很难直接访问，因此上层的RBD、RGW和CephFS都是通过librados访问的，目前提供PHP、Ruby、Java、Python、C和C++支持。</p>\n</li>\n<li><p>CRUSH<br>CRUSH是Ceph使用的数据分布算法，类似一致性哈希，让数据分配到预期的地方。</p>\n</li>\n<li><p>RBD<br>RBD全称RADOS block device，是Ceph对外提供的块设备服务。</p>\n</li>\n<li><p>RGW<br>RGW全称RADOS gateway，是Ceph对外提供的对象存储服务，接口与S3和Swift兼容。</p>\n</li>\n<li><p>CephFS<br>CephFS全称Ceph File System，是Ceph对外提供的文件系统服务。</p>\n</li>\n</ul>\n<h2 id=\"1-5-三种存储类型-块存储\"><a href=\"#1-5-三种存储类型-块存储\" class=\"headerlink\" title=\"1.5 三种存储类型-块存储\"></a>1.5 三种存储类型-块存储</h2><p><strong>典型设备：</strong> 磁盘阵列，硬盘</p>\n<p>主要是将裸磁盘空间映射给主机使用的。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>通过Raid与LVM等手段，对数据提供了保护。</li>\n<li>多块廉价的硬盘组合起来，提高容量。</li>\n<li>多块磁盘组合出来的逻辑盘，提升读写效率。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>采用SAN架构组网时，光纤交换机，造价成本高。</li>\n<li>主机之间无法共享数据。</li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>docker容器、虚拟机磁盘存储分配。</li>\n<li>日志存储。</li>\n<li>文件存储。</li>\n<li>…</li>\n</ul>\n<h2 id=\"1-6-三种存储类型-文件存储\"><a href=\"#1-6-三种存储类型-文件存储\" class=\"headerlink\" title=\"1.6 三种存储类型-文件存储\"></a>1.6 三种存储类型-文件存储</h2><p><strong>典型设备：</strong> FTP、NFS服务器<br>为了克服块存储文件无法共享的问题，所以有了文件存储。<br>在服务器上架设FTP与NFS服务，就是文件存储。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>造价低，随便一台机器就可以了。</li>\n<li>方便文件共享。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>读写速率低。</li>\n<li>传输速率慢。</li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>日志存储。</li>\n<li>有目录结构的文件存储。</li>\n<li>…</li>\n</ul>\n<h2 id=\"1-7-三种存储类型-对象存储\"><a href=\"#1-7-三种存储类型-对象存储\" class=\"headerlink\" title=\"1.7 三种存储类型-对象存储\"></a>1.7 三种存储类型-对象存储</h2><p><strong>典型设备：</strong> 内置大容量硬盘的分布式服务器(swift, s3)</p>\n<p>多台服务器内置大容量硬盘，安装上对象存储管理软件，对外提供读写访问功能。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>具备块存储的读写高速。</li>\n<li>具备文件存储的共享等特性。</li>\n</ul>\n<p><strong>使用场景：</strong> (适合更新变动较少的数据)</p>\n<ul>\n<li>图片存储。</li>\n<li>视频存储。</li>\n<li>…</li>\n</ul>\n<h1 id=\"2-Ceph-IO流程及数据分布\"><a href=\"#2-Ceph-IO流程及数据分布\" class=\"headerlink\" title=\"2. Ceph IO流程及数据分布\"></a>2. Ceph IO流程及数据分布</h1><p><img src=\"https://raw.githubusercontent.com/effygao/picture/master/img/ceph2.jpg\"></p>\n<h2 id=\"2-1-正常IO流程图\"><a href=\"#2-1-正常IO流程图\" class=\"headerlink\" title=\"2.1 正常IO流程图\"></a>2.1 正常IO流程图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-2c47144a5118bcf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_io_2.png\"></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>client 创建cluster handler。</li>\n<li>client 读取配置文件。</li>\n<li>client 连接上monitor，获取集群map信息。</li>\n<li>client 读写io 根据crshmap 算法请求对应的主osd数据节点。</li>\n<li>主osd数据节点同时写入另外两个副本节点数据。</li>\n<li>等待主节点以及另外两个副本节点写完数据状态。</li>\n<li>主节点及副本节点写入状态都成功后，返回给client，io写入完成。</li>\n</ol>\n<h2 id=\"2-2-新主IO流程图\"><a href=\"#2-2-新主IO流程图\" class=\"headerlink\" title=\"2.2 新主IO流程图\"></a>2.2 新主IO流程图</h2><p><strong>说明：</strong></p>\n<p>如果新加入的OSD1取代了原有的 OSD4成为 Primary OSD, 由于 OSD1 上未创建 PG , 不存在数据，那么 PG 上的 I&#x2F;O 无法进行，怎样工作的呢？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-9cc1013f7e3dc8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_io_3.png\"></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>client连接monitor获取集群map信息。</li>\n<li>同时新主osd1由于没有pg数据会主动上报monitor告知让osd2临时接替为主。</li>\n<li>临时主osd2会把数据全量同步给新主osd1。</li>\n<li>client IO读写直接连接临时主osd2进行读写。</li>\n<li>osd2收到读写io，同时写入另外两副本节点。</li>\n<li>等待osd2以及另外两副本写入成功。</li>\n<li>osd2三份数据都写入成功返回给client, 此时client io读写完毕。</li>\n<li>如果osd1数据同步完毕，临时主osd2会交出主角色。</li>\n<li>osd1成为主节点，osd2变成副本。</li>\n</ol>\n<h2 id=\"2-3-Ceph-IO算法流程\"><a href=\"#2-3-Ceph-IO算法流程\" class=\"headerlink\" title=\"2.3 Ceph IO算法流程\"></a>2.3 Ceph IO算法流程</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-b24c72ac8bbf1a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_io_4.png\"></p>\n<ol>\n<li><p>File用户需要读写的文件。File-&gt;Object映射：<br>a. ino (File的元数据，File的唯一id)。<br>b. ono(File切分产生的某个object的序号，默认以4M切分一个块大小)。<br>c. oid(object id: ino + ono)。</p>\n</li>\n<li><p>Object是RADOS需要的对象。Ceph指定一个静态hash函数计算oid的值，将oid映射成一个近似均匀分布的伪随机值，然后和mask按位相与，得到pgid。Object-&gt;PG映射：<br>a. hash(oid) &amp; mask-&gt; pgid 。<br>b. mask &#x3D; PG总数m(m为2的整数幂)-1 。</p>\n</li>\n<li><p>PG(Placement Group),用途是对object的存储进行组织和位置映射, (类似于redis cluster里面的slot的概念) 一个PG里面会有很多object。采用CRUSH算法，将pgid代入其中，然后得到一组OSD。PG-&gt;OSD映射：<br>a. CRUSH(pgid)-&gt;(osd1,osd2,osd3) 。</p>\n</li>\n</ol>\n<h2 id=\"2-4-Ceph-IO伪代码流程\"><a href=\"#2-4-Ceph-IO伪代码流程\" class=\"headerlink\" title=\"2.4 Ceph IO伪代码流程\"></a>2.4 Ceph IO伪代码流程</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">locator &#x3D; object_name\nobj_hash &#x3D;  hash(locator)\npg &#x3D; obj_hash % num_pg\nosds_for_pg &#x3D; crush(pg)    # returns a list of osds\nprimary &#x3D; osds_for_pg[0]\nreplicas &#x3D; osds_for_pg[1:]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-5-Ceph-RBD-IO流程\"><a href=\"#2-5-Ceph-RBD-IO流程\" class=\"headerlink\" title=\"2.5 Ceph RBD IO流程\"></a>2.5 Ceph RBD IO流程</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-ed51d7d8050dbf64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_rbd_io.png\"></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>客户端创建一个pool，需要为这个pool指定pg的数量。</li>\n<li>创建pool&#x2F;image rbd设备进行挂载。</li>\n<li>用户写入的数据进行切块，每个块的大小默认为4M，并且每个块都有一个名字，名字就是object+序号。</li>\n<li>将每个object通过pg进行副本位置的分配。</li>\n<li>pg根据cursh算法会寻找3个osd，把这个object分别保存在这三个osd上。</li>\n<li>osd上实际是把底层的disk进行了格式化操作，一般部署工具会将它格式化为xfs文件系统。</li>\n<li>object的存储就变成了存储一个文rbd0.object1.file。</li>\n</ol>\n<h2 id=\"2-6-Ceph-RBD-IO框架图\"><a href=\"#2-6-Ceph-RBD-IO框架图\" class=\"headerlink\" title=\"2.6 Ceph RBD IO框架图\"></a>2.6 Ceph RBD IO框架图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-850a745bc0f44494.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_rbd_io1.png\"></p>\n<p><strong>客户端写数据osd过程：</strong></p>\n<ol>\n<li>采用的是librbd的形式，使用librbd创建一个块设备，向这个块设备中写入数据。</li>\n<li>在客户端本地同过调用librados接口，然后经过pool，rbd，object、pg进行层层映射,在PG这一层中，可以知道数据保存在哪3个OSD上，这3个OSD分为主从的关系。</li>\n<li>客户端与primay OSD建立SOCKET 通信，将要写入的数据传给primary OSD，由primary OSD再将数据发送给其他replica OSD数据节点。</li>\n</ol>\n<h2 id=\"2-7-Ceph-Pool和PG分布情况\"><a href=\"#2-7-Ceph-Pool和PG分布情况\" class=\"headerlink\" title=\"2.7 Ceph Pool和PG分布情况\"></a>2.7 Ceph Pool和PG分布情况</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-d49d90ae6a918ef2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_pool_pg.png\"></p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>pool是ceph存储数据时的逻辑分区，它起到namespace的作用。</li>\n<li>每个pool包含一定数量(可配置)的PG。</li>\n<li>PG里的对象被映射到不同的OSD上。</li>\n<li>pool是分布到整个集群的。</li>\n<li>pool可以做故障隔离域，根据不同的用户场景不一进行隔离。</li>\n</ul>\n<h2 id=\"2-8-Ceph-数据扩容PG分布\"><a href=\"#2-8-Ceph-数据扩容PG分布\" class=\"headerlink\" title=\"2.8 Ceph 数据扩容PG分布\"></a>2.8 Ceph 数据扩容PG分布</h2><p><strong>场景数据迁移流程：</strong></p>\n<ul>\n<li>现状3个OSD, 4个PG</li>\n<li>扩容到4个OSD, 4个PG</li>\n</ul>\n<p><strong>现状：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-4dda9e2648dabe90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_recory_1.png\"></p>\n<p><strong>扩容后：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-9e324e87c6d086f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_io_recry2.png\"></p>\n<p><strong>说明</strong></p>\n<p>每个OSD上分布很多PG, 并且每个PG会自动散落在不同的OSD上。如果扩容那么相应的PG会进行迁移到新的OSD上，保证PG数量的均衡。</p>\n<h1 id=\"3-Ceph心跳机制\"><a href=\"#3-Ceph心跳机制\" class=\"headerlink\" title=\"3. Ceph心跳机制\"></a>3. Ceph心跳机制</h1><h2 id=\"3-1-心跳介绍\"><a href=\"#3-1-心跳介绍\" class=\"headerlink\" title=\"3.1 心跳介绍\"></a>3.1 心跳介绍</h2><p>心跳是用于节点间检测对方是否故障的，以便及时发现故障节点进入相应的故障处理流程。</p>\n<p><strong>问题：</strong></p>\n<ul>\n<li>故障检测时间和心跳报文带来的负载之间做权衡。</li>\n<li>心跳频率太高则过多的心跳报文会影响系统性能。</li>\n<li>心跳频率过低则会延长发现故障节点的时间，从而影响系统的可用性。</li>\n</ul>\n<p><strong>故障检测策略应该能够做到：</strong></p>\n<ul>\n<li>及时：节点发生异常如宕机或网络中断时，集群可以在可接受的时间范围内感知。</li>\n<li>适当的压力：包括对节点的压力，和对网络的压力。</li>\n<li>容忍网络抖动：网络偶尔延迟。</li>\n<li>扩散机制：节点存活状态改变导致的元信息变化需要通过某种机制扩散到整个集群。</li>\n</ul>\n<h2 id=\"3-2-Ceph-心跳检测\"><a href=\"#3-2-Ceph-心跳检测\" class=\"headerlink\" title=\"3.2 Ceph 心跳检测\"></a>3.2 Ceph 心跳检测</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-797b8f8c9e2de4d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_heartbeat_1.png\"></p>\n<p><strong>OSD节点会监听public、cluster、front和back四个端口</strong></p>\n<ul>\n<li>public端口：监听来自Monitor和Client的连接。</li>\n<li>cluster端口：监听来自OSD Peer的连接。</li>\n<li>front端口：供客户端连接集群使用的网卡, 这里临时给集群内部之间进行心跳。</li>\n<li>back端口：供客集群内部使用的网卡。集群内部之间进行心跳。</li>\n<li>hbclient：发送ping心跳的messenger。</li>\n</ul>\n<h2 id=\"3-3-Ceph-OSD之间相互心跳检测\"><a href=\"#3-3-Ceph-OSD之间相互心跳检测\" class=\"headerlink\" title=\"3.3 Ceph OSD之间相互心跳检测\"></a>3.3 Ceph OSD之间相互心跳检测</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-a04c96ba04ec47df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_heartbeat_osd.png\"></p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>同一个PG内OSD互相心跳，他们互相发送PING&#x2F;PONG信息。</li>\n<li>每隔6s检测一次(实际会在这个基础上加一个随机时间来避免峰值)。</li>\n<li>20s没有检测到心跳回复，加入failure队列。</li>\n</ul>\n<h2 id=\"3-4-Ceph-OSD与Mon心跳检测\"><a href=\"#3-4-Ceph-OSD与Mon心跳检测\" class=\"headerlink\" title=\"3.4 Ceph OSD与Mon心跳检测\"></a>3.4 Ceph OSD与Mon心跳检测</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-06fcd181ba5c2671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_heartbeat_mon.png\"></p>\n<p><strong>OSD报告给Monitor：</strong></p>\n<ul>\n<li>OSD有事件发生时（比如故障、PG变更）。</li>\n<li>自身启动5秒内。</li>\n<li>OSD周期性的上报给Monito<ul>\n<li>OSD检查failure_queue中的伙伴OSD失败信息。</li>\n<li>向Monitor发送失效报告，并将失败信息加入failure_pending队列，然后将其从failure_queue移除。</li>\n<li>收到来自failure_queue或者failure_pending中的OSD的心跳时，将其从两个队列中移除，并告知Monitor取消之前的失效报告。</li>\n<li>当发生与Monitor网络重连时，会将failure_pending中的错误报告加回到failure_queue中，并再次发送给Monitor。</li>\n</ul>\n</li>\n<li>Monitor统计下线OSD<ul>\n<li>Monitor收集来自OSD的伙伴失效报告。</li>\n<li>当错误报告指向的OSD失效超过一定阈值，且有足够多的OSD报告其失效时，将该OSD下线。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-5-Ceph心跳检测总结\"><a href=\"#3-5-Ceph心跳检测总结\" class=\"headerlink\" title=\"3.5 Ceph心跳检测总结\"></a>3.5 Ceph心跳检测总结</h2><p>Ceph通过伙伴OSD汇报失效节点和Monitor统计来自OSD的心跳两种方式判定OSD节点失效。</p>\n<ul>\n<li><strong>及时：</strong>伙伴OSD可以在秒级发现节点失效并汇报Monitor，并在几分钟内由Monitor将失效OSD下线。</li>\n<li><strong>适当的压力：</strong>由于有伙伴OSD汇报机制，Monitor与OSD之间的心跳统计更像是一种保险措施，因此OSD向Monitor发送心跳的间隔可以长达600秒，Monitor的检测阈值也可以长达900秒。Ceph实际上是将故障检测过程中中心节点的压力分散到所有的OSD上，以此提高中心节点Monitor的可靠性，进而提高整个集群的可扩展性。</li>\n<li><strong>容忍网络抖动：</strong>Monitor收到OSD对其伙伴OSD的汇报后，并没有马上将目标OSD下线，而是周期性的等待几个条件：<ul>\n<li>目标OSD的失效时间大于通过固定量osd_heartbeat_grace和历史网络条件动态确定的阈值。</li>\n<li>来自不同主机的汇报达到mon_osd_min_down_reporters。</li>\n<li>满足前两个条件前失效汇报没有被源OSD取消。</li>\n</ul>\n</li>\n<li><strong>扩散：</strong>作为中心节点的Monitor并没有在更新OSDMap后尝试广播通知所有的OSD和Client，而是惰性的等待OSD和Client来获取。以此来减少Monitor压力并简化交互逻辑。</li>\n</ul>\n<h1 id=\"4-Ceph通信框架\"><a href=\"#4-Ceph通信框架\" class=\"headerlink\" title=\"4. Ceph通信框架\"></a>4. Ceph通信框架</h1><h2 id=\"4-1-Ceph通信框架种类介绍\"><a href=\"#4-1-Ceph通信框架种类介绍\" class=\"headerlink\" title=\"4.1 Ceph通信框架种类介绍\"></a>4.1 Ceph通信框架种类介绍</h2><p><strong>网络通信框架三种不同的实现方式：</strong></p>\n<ul>\n<li>Simple线程模式<br>特点：每一个网络链接，都会创建两个线程，一个用于接收，一个用于发送。<br>缺点：大量的链接会产生大量的线程，会消耗CPU资源，影响性能。</li>\n<li>Async事件的I&#x2F;O多路复用模式<br>特点：这种是目前网络通信中广泛采用的方式。k版默认已经使用Asnyc了。</li>\n<li>XIO方式使用了开源的网络通信库accelio来实现<br>特点：这种方式需要依赖第三方的库accelio稳定性，目前处于试验阶段。</li>\n</ul>\n<h2 id=\"4-2-Ceph通信框架设计模式\"><a href=\"#4-2-Ceph通信框架设计模式\" class=\"headerlink\" title=\"4.2 Ceph通信框架设计模式\"></a>4.2 Ceph通信框架设计模式</h2><p><strong>设计模式(Subscribe&#x2F;Publish)：</strong></p>\n<p>订阅发布模式又名观察者模式，它意图是“定义对象间的一种一对多的依赖关系，</p>\n<p>当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新”。</p>\n<h2 id=\"4-3-Ceph通信框架流程图\"><a href=\"#4-3-Ceph通信框架流程图\" class=\"headerlink\" title=\"4.3 Ceph通信框架流程图\"></a>4.3 Ceph通信框架流程图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-8662667e6a06e931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_message.png\"></p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>Accepter监听peer的请求, 调用 SimpleMessenger::add_accept_pipe() 创建新的 Pipe 到 SimpleMessenger::pipes 来处理该请求。</li>\n<li>Pipe用于消息的读取和发送。该类主要有两个组件，Pipe::Reader，Pipe::Writer用来处理消息读取和发送。</li>\n<li>Messenger作为消息的发布者, 各个 Dispatcher 子类作为消息的订阅者, Messenger 收到消息之后，  通过 Pipe 读取消息，然后转给 Dispatcher 处理。</li>\n<li>Dispatcher是订阅者的基类，具体的订阅后端继承该类,初始化的时候通过 Messenger::add_dispatcher_tail&#x2F;head 注册到 Messenger::dispatchers. 收到消息后，通知该类处理。</li>\n<li>DispatchQueue该类用来缓存收到的消息, 然后唤醒 DispatchQueue::dispatch_thread 线程找到后端的 Dispatch 处理消息。</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-f7e6ef5c9d3fe38f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_message_2.png\"></p>\n<h2 id=\"4-4-Ceph通信框架类图\"><a href=\"#4-4-Ceph通信框架类图\" class=\"headerlink\" title=\"4.4 Ceph通信框架类图\"></a>4.4 Ceph通信框架类图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-a7d2248cb9963f1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_message_3.png\"></p>\n<h2 id=\"4-5-Ceph通信数据格式\"><a href=\"#4-5-Ceph通信数据格式\" class=\"headerlink\" title=\"4.5 Ceph通信数据格式\"></a>4.5 Ceph通信数据格式</h2><p>通信协议格式需要双方约定数据格式。</p>\n<p><strong>消息的内容主要分为三部分：</strong></p>\n<ul>\n<li>header              &#x2F;&#x2F;消息头，类型消息的信封</li>\n<li>user data          &#x2F;&#x2F;需要发送的实际数据<ul>\n<li>payload     &#x2F;&#x2F;操作保存元数据</li>\n<li>middle      &#x2F;&#x2F;预留字段</li>\n<li>data          &#x2F;&#x2F;读写数据</li>\n</ul>\n</li>\n<li>footer             &#x2F;&#x2F;消息的结束标记<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Message : public RefCountedObject &#123;\nprotected:\n  ceph_msg_header  header;      &#x2F;&#x2F; 消息头\n  ceph_msg_footer  footer;\t\t&#x2F;&#x2F; 消息尾\n  bufferlist       payload;  &#x2F;&#x2F; &quot;front&quot; unaligned blob\n  bufferlist       middle;   &#x2F;&#x2F; &quot;middle&quot; unaligned blob\n  bufferlist       data;     &#x2F;&#x2F; data payload (page-alignment will be preserved where possible)\n\n  &#x2F;* recv_stamp is set when the Messenger starts reading the\n   * Message off the wire *&#x2F;\n  utime_t recv_stamp;\t\t&#x2F;&#x2F;开始接收数据的时间戳\n  &#x2F;* dispatch_stamp is set when the Messenger starts calling dispatch() on\n   * its endpoints *&#x2F;\n  utime_t dispatch_stamp;\t&#x2F;&#x2F;dispatch 的时间戳\n  &#x2F;* throttle_stamp is the point at which we got throttle *&#x2F;\n  utime_t throttle_stamp;\t&#x2F;&#x2F;获取throttle 的slot的时间戳\n  &#x2F;* time at which message was fully read *&#x2F;\n  utime_t recv_complete_stamp;\t&#x2F;&#x2F;接收完成的时间戳\n\n  ConnectionRef connection;\t\t&#x2F;&#x2F;网络连接\n\n  uint32_t magic &#x3D; 0;\t\t\t&#x2F;&#x2F;消息的魔术字\n\n  bi::list_member_hook&lt;&gt; dispatch_q;\t&#x2F;&#x2F;boost::intrusive 成员字段\n&#125;;\n\nstruct ceph_msg_header &#123;\n\t__le64 seq;       &#x2F;&#x2F; 当前session内 消息的唯一 序号\n\t__le64 tid;       &#x2F;&#x2F; 消息的全局唯一的 id\n\t__le16 type;      &#x2F;&#x2F; 消息类型\n\t__le16 priority;  &#x2F;&#x2F; 优先级\n\t__le16 version;   &#x2F;&#x2F; 版本号\n\n\t__le32 front_len; &#x2F;&#x2F; payload 的长度\n\t__le32 middle_len;&#x2F;&#x2F; middle 的长度\n\t__le32 data_len;  &#x2F;&#x2F; data 的 长度\n\t__le16 data_off;  &#x2F;&#x2F; 对象的数据偏移量\n\n\n\tstruct ceph_entity_name src; &#x2F;&#x2F;消息源\n\n\t&#x2F;* oldest code we think can decode this.  unknown if zero. *&#x2F;\n\t__le16 compat_version;\n\t__le16 reserved;\n\t__le32 crc;       &#x2F;* header crc32c *&#x2F;\n&#125; __attribute__ ((packed));\n\nstruct ceph_msg_footer &#123;\n\t__le32 front_crc, middle_crc, data_crc; &#x2F;&#x2F;crc校验码\n\t__le64  sig; &#x2F;&#x2F;消息的64位signature\n\t__u8 flags; &#x2F;&#x2F;结束标志\n&#125; __attribute__ ((packed));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"5-Ceph-CRUSH算法\"><a href=\"#5-Ceph-CRUSH算法\" class=\"headerlink\" title=\"5. Ceph CRUSH算法\"></a>5. Ceph CRUSH算法</h1><h2 id=\"5-1-数据分布算法挑战\"><a href=\"#5-1-数据分布算法挑战\" class=\"headerlink\" title=\"5.1 数据分布算法挑战\"></a>5.1 数据分布算法挑战</h2><ul>\n<li>数据分布和负载均衡：<br>a. 数据分布均衡，使数据能均匀的分布到各个节点上。<br>b. 负载均衡，使数据访问读写操作的负载在各个节点和磁盘的负载均衡。</li>\n<li>灵活应对集群伸缩<br>a. 系统可以方便的增加或者删除节点设备，并且对节点失效进行处理。<br>b. 增加或者删除节点设备后，能自动实现数据的均衡，并且尽可能少的迁移数据。</li>\n<li>支持大规模集群<br>a. 要求数据分布算法维护的元数据相对较小，并且计算量不能太大。随着集群规模的增 加，数据分布算法开销相对比较小。</li>\n</ul>\n<h2 id=\"5-2-Ceph-CRUSH算法说明\"><a href=\"#5-2-Ceph-CRUSH算法说明\" class=\"headerlink\" title=\"5.2 Ceph CRUSH算法说明\"></a>5.2 Ceph CRUSH算法说明</h2><ul>\n<li>CRUSH算法的全称为：Controlled Scalable Decentralized Placement of Replicated Data，可控的、可扩展的、分布式的副本数据放置算法。</li>\n<li>pg到OSD的映射的过程算法叫做CRUSH 算法。(一个Object需要保存三个副本，也就是需要保存在三个osd上)。</li>\n<li>CRUSH算法是一个伪随机的过程，他可以从所有的OSD中，随机性选择一个OSD集合，但是同一个PG每次随机选择的结果是不变的，也就是映射的OSD集合是固定的。</li>\n</ul>\n<h2 id=\"5-3-Ceph-CRUSH算法原理\"><a href=\"#5-3-Ceph-CRUSH算法原理\" class=\"headerlink\" title=\"5.3 Ceph CRUSH算法原理\"></a>5.3 Ceph CRUSH算法原理</h2><p><strong>CRUSH算法因子：</strong></p>\n<ul>\n<li>层次化的Cluster Map<br>反映了存储系统层级的物理拓扑结构。定义了OSD集群具有层级关系的 静态拓扑结构。OSD层级使得 CRUSH算法在选择OSD时实现了机架感知能力，也就是通过规则定义， 使得副本可以分布在不同的机 架、不同的机房中、提供数据的安全性 。</li>\n<li>Placement Rules<br>决定了一个PG的对象副本如何选择的规则，通过这些可以自己设定规则，用户可以自定义设置副本在集群中的分布。</li>\n</ul>\n<h3 id=\"5-3-1-层级化的Cluster-Map\"><a href=\"#5-3-1-层级化的Cluster-Map\" class=\"headerlink\" title=\"5.3.1 层级化的Cluster Map\"></a>5.3.1 层级化的Cluster Map</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-f0f7321a9e37361f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_crush.png\"></p>\n<p>CRUSH Map是一个树形结构，OSDMap更多记录的是OSDMap的属性(epoch&#x2F;fsid&#x2F;pool信息以及osd的ip等等)。</p>\n<p>叶子节点是device（也就是osd），其他的节点称为bucket节点，这些bucket都是虚构的节点，可以根据物理结构进行抽象，当然树形结构只有一个最终的根节点称之为root节点，中间虚拟的bucket节点可以是数据中心抽象、机房抽象、机架抽象、主机抽象等。</p>\n<h3 id=\"5-3-2-数据分布策略Placement-Rules\"><a href=\"#5-3-2-数据分布策略Placement-Rules\" class=\"headerlink\" title=\"5.3.2 数据分布策略Placement Rules\"></a>5.3.2 数据分布策略Placement Rules</h3><p><strong>数据分布策略Placement Rules主要有特点：</strong></p>\n<p>a. 从CRUSH Map中的哪个节点开始查找<br>b. 使用那个节点作为故障隔离域<br>c. 定位副本的搜索模式（广度优先 or 深度优先）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rule replicated_ruleset  #规则集的命名，创建pool时可以指定rule集\n&#123;\n    ruleset 0                #rules集的编号，顺序编即可   \n    type replicated          #定义pool类型为replicated(还有erasure模式)   \n    min_size 1                #pool中最小指定的副本数量不能小1\n    max_size 10               #pool中最大指定的副本数量不能大于10       \n    step take default         #查找bucket入口点，一般是root类型的bucket    \n    step chooseleaf  firstn  0  type  host #选择一个host,并递归选择叶子节点osd     \n    step emit        #结束\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-3-3-Bucket随机算法类型\"><a href=\"#5-3-3-Bucket随机算法类型\" class=\"headerlink\" title=\"5.3.3 Bucket随机算法类型\"></a>5.3.3 Bucket随机算法类型</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-ac18dabc9fb44d20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_bucket.png\"></p>\n<ul>\n<li>一般的buckets：适合所有子节点权重相同，而且很少添加删除item。</li>\n<li>list buckets：适用于集群扩展类型。增加item，产生最优的数据移动，查找item，时间复杂度O(n)。</li>\n<li>tree buckets：查找负责度是O (log n), 添加删除叶子节点时，其他节点node_id不变。</li>\n<li>straw buckets：允许所有项通过类似抽签的方式来与其他项公平“竞争”。定位副本时，bucket中的每一项都对应一个随机长度的straw，且拥有最长长度的straw会获得胜利（被选中），添加或者重新计算，子树之间的数据移动提供最优的解决方案。</li>\n</ul>\n<h2 id=\"5-4-CRUSH算法案例\"><a href=\"#5-4-CRUSH算法案例\" class=\"headerlink\" title=\"5.4 CRUSH算法案例\"></a>5.4 CRUSH算法案例</h2><p><strong>说明：</strong></p>\n<p>集群中有部分sas和ssd磁盘，现在有个业务线性能及可用性优先级高于其他业务线，能否让这个高优业务线的数据都存放在ssd磁盘上。</p>\n<p><strong>普通用户：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-1bd6980a2141bc51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_sas.png\"></p>\n<p><strong>高优用户：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-127c6f8a40938233.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ssd.png\"></p>\n<p><strong>配置规则：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-0084962b3a7847b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_crush1.png\"></p>\n<h1 id=\"6-定制化Ceph-RBD-QOS\"><a href=\"#6-定制化Ceph-RBD-QOS\" class=\"headerlink\" title=\"6. 定制化Ceph RBD QOS\"></a>6. 定制化Ceph RBD QOS</h1><h2 id=\"6-1-QOS介绍\"><a href=\"#6-1-QOS介绍\" class=\"headerlink\" title=\"6.1 QOS介绍\"></a>6.1 QOS介绍</h2><p>QoS （Quality of Service，服务质量）起源于网络技术，它用来解决网络延迟和阻塞等问题，能够为指定的网络通信提供更好的服务能力。</p>\n<p><strong>问题：</strong></p>\n<p>我们总的Ceph集群的iIO能力是有限的，比如带宽，IOPS。如何避免用户争取资源，如果保证集群所有用户资源的高可用性，以及如何保证高优用户资源的可用性。所以我们需要把有限的IO能力合理分配。</p>\n<h2 id=\"6-2-Ceph-IO操作类型\"><a href=\"#6-2-Ceph-IO操作类型\" class=\"headerlink\" title=\"6.2 Ceph IO操作类型\"></a>6.2 Ceph IO操作类型</h2><ul>\n<li>ClientOp：来自客户端的读写I&#x2F;O请求。</li>\n<li>SubOp：osd之间的I&#x2F;O请求。主要包括由客户端I&#x2F;O产生的副本间数据读写请求，以及由数据同步、数据扫描、负载均衡等引起的I&#x2F;O请求。</li>\n<li>SnapTrim：快照数据删除。从客户端发送快照删除命令后，删除相关元数据便直接返回，之后由后台线程删除真实的快照数据。通过控制snaptrim的速率间接控制删除速率。</li>\n<li>Scrub：用于发现对象的静默数据错误，扫描元数据的Scrub和对象整体扫描的deep Scrub。</li>\n<li>Recovery：数据恢复和迁移。集群扩&#x2F;缩容、osd失效&#x2F;从新加入等过程。</li>\n</ul>\n<h2 id=\"6-3-Ceph-官方QOS原理\"><a href=\"#6-3-Ceph-官方QOS原理\" class=\"headerlink\" title=\"6.3 Ceph 官方QOS原理\"></a>6.3 Ceph 官方QOS原理</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-1e1649e967f3ae12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_mclok_qos.png\"></p>\n<p>mClock是一种基于时间标签的I&#x2F;O调度算法，最先被Vmware提出来的用于集中式管理的存储系统。(目前官方QOS模块属于半成品)。</p>\n<p><strong>基本思想：</strong></p>\n<ul>\n<li>reservation 预留，表示客户端获得的最低I&#x2F;O资源。</li>\n<li>weight 权重，表示客户端所占共享I&#x2F;O资源的比重。</li>\n<li>limit 上限，表示客户端可获得的最高I&#x2F;O资源。</li>\n</ul>\n<h2 id=\"6-4-定制化QOS原理\"><a href=\"#6-4-定制化QOS原理\" class=\"headerlink\" title=\"6.4 定制化QOS原理\"></a>6.4 定制化QOS原理</h2><h3 id=\"6-4-1-令牌桶算法介绍\"><a href=\"#6-4-1-令牌桶算法介绍\" class=\"headerlink\" title=\"6.4.1 令牌桶算法介绍\"></a>6.4.1 令牌桶算法介绍</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-44d8c1a4d4bfd7bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_token_qos.png\"></p>\n<p>基于令牌桶算法(TokenBucket)实现了一套简单有效的qos功能，满足了云平台用户的核心需求。</p>\n<p><strong>基本思想：</strong></p>\n<ul>\n<li>按特定的速率向令牌桶投放令牌。</li>\n<li>根据预设的匹配规则先对报文进行分类，不符合匹配规则的报文不需要经过令牌桶的处理，直接发送。</li>\n<li>符合匹配规则的报文，则需要令牌桶进行处理。当桶中有足够的令牌则报文可以被继续发送下去，同时令牌桶中的令牌量按报文的长度做相应的减少。</li>\n<li>当令牌桶中的令牌不足时，报文将不能被发送，只有等到桶中生成了新的令牌，报文才可以发送。这就可以限制报文的流量只能是小于等于令牌生成的速度，达到限制流量的目的。</li>\n</ul>\n<h3 id=\"6-4-2-RBD令牌桶算法流程\"><a href=\"#6-4-2-RBD令牌桶算法流程\" class=\"headerlink\" title=\"6.4.2 RBD令牌桶算法流程\"></a>6.4.2 RBD令牌桶算法流程</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-ee0e5f4494379b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_token1.png\"></p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>用户发起请求异步IO到达Image中。</li>\n<li>请求到达ImageRequestWQ队列中。</li>\n<li>在ImageRequestWQ出队列的时候加入令牌桶算法TokenBucket。</li>\n<li>通过令牌桶算法进行限速，然后发送给ImageRequest进行处理。</li>\n</ul>\n<h3 id=\"6-4-3-RBD令牌桶算法框架图\"><a href=\"#6-4-3-RBD令牌桶算法框架图\" class=\"headerlink\" title=\"6.4.3 RBD令牌桶算法框架图\"></a>6.4.3 RBD令牌桶算法框架图</h3><p><strong>现有框架图：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-a5c9368ebffc0c96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_qos2.png\"></p>\n<p><strong>令牌图算法框架图：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2099201-da583f0fc10fbd87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ceph_qos_token2.png\"></p>\n","text":"1.1 Ceph简介Ceph是一个统一的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。 Ceph项目最早起源于Sage就读博士期间的工作（最早的成果于2004年发表），并随后贡献给开源社区。在经过了数年的发展之后，目前已得到众多云计算厂商的支持并被广泛应用。RedH...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"},{"name":"Ceph","slug":"Ceph","count":1,"path":"api/tags/Ceph.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Ceph%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.1 Ceph简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Ceph%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.2 Ceph特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-Ceph%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">1.3 Ceph架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-Ceph%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%8F%8A%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.4 Ceph核心组件及概念介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-%E4%B8%89%E7%A7%8D%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B-%E5%9D%97%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">1.5 三种存储类型-块存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E4%B8%89%E7%A7%8D%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">1.6 三种存储类型-文件存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E4%B8%89%E7%A7%8D%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">1.7 三种存储类型-对象存储</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Ceph-IO%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83\"><span class=\"toc-text\">2. Ceph IO流程及数据分布</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E6%AD%A3%E5%B8%B8IO%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">2.1 正常IO流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%96%B0%E4%B8%BBIO%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">2.2 新主IO流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-Ceph-IO%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.3 Ceph IO算法流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-Ceph-IO%E4%BC%AA%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.4 Ceph IO伪代码流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-Ceph-RBD-IO%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.5 Ceph RBD IO流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-Ceph-RBD-IO%E6%A1%86%E6%9E%B6%E5%9B%BE\"><span class=\"toc-text\">2.6 Ceph RBD IO框架图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-Ceph-Pool%E5%92%8CPG%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5\"><span class=\"toc-text\">2.7 Ceph Pool和PG分布情况</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-Ceph-%E6%95%B0%E6%8D%AE%E6%89%A9%E5%AE%B9PG%E5%88%86%E5%B8%83\"><span class=\"toc-text\">2.8 Ceph 数据扩容PG分布</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Ceph%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">3. Ceph心跳机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BF%83%E8%B7%B3%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.1 心跳介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Ceph-%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">3.2 Ceph 心跳检测</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Ceph-OSD%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">3.3 Ceph OSD之间相互心跳检测</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-Ceph-OSD%E4%B8%8EMon%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">3.4 Ceph OSD与Mon心跳检测</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-Ceph%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.5 Ceph心跳检测总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-Ceph%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">4. Ceph通信框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-Ceph%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%A7%8D%E7%B1%BB%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.1 Ceph通信框架种类介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-Ceph%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4.2 Ceph通信框架设计模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-Ceph%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">4.3 Ceph通信框架流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-Ceph%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9B%BE\"><span class=\"toc-text\">4.4 Ceph通信框架类图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-Ceph%E9%80%9A%E4%BF%A1%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">4.5 Ceph通信数据格式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-Ceph-CRUSH%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">5. Ceph CRUSH算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98\"><span class=\"toc-text\">5.1 数据分布算法挑战</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-Ceph-CRUSH%E7%AE%97%E6%B3%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">5.2 Ceph CRUSH算法说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-Ceph-CRUSH%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.3 Ceph CRUSH算法原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E5%B1%82%E7%BA%A7%E5%8C%96%E7%9A%84Cluster-Map\"><span class=\"toc-text\">5.3.1 层级化的Cluster Map</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83%E7%AD%96%E7%95%A5Placement-Rules\"><span class=\"toc-text\">5.3.2 数据分布策略Placement Rules</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-3-Bucket%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.3.3 Bucket随机算法类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-CRUSH%E7%AE%97%E6%B3%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">5.4 CRUSH算法案例</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E5%AE%9A%E5%88%B6%E5%8C%96Ceph-RBD-QOS\"><span class=\"toc-text\">6. 定制化Ceph RBD QOS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-QOS%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">6.1 QOS介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-Ceph-IO%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">6.2 Ceph IO操作类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-3-Ceph-%E5%AE%98%E6%96%B9QOS%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">6.3 Ceph 官方QOS原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-4-%E5%AE%9A%E5%88%B6%E5%8C%96QOS%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">6.4 定制化QOS原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-1-%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">6.4.1 令牌桶算法介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-2-RBD%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">6.4.2 RBD令牌桶算法流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-3-RBD%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6%E5%9B%BE\"><span class=\"toc-text\">6.4.3 RBD令牌桶算法框架图</span></a></li></ol></li></ol>","author":{"name":"网工混子","slug":"blog-author","avatar":"https://raw.githubusercontent.com/effygao/picture/master/img/IMG_2542.jpeg","link":"/","description":"如果没能一次成功，那就叫它1.0版吧 <br /> <br /> <b> No one but you.</b>","socials":{"github":"https://github.com/effygao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/dreamland-81","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://live.bilibili.com/185871311"},"qq":{"icon":"/svg/qq.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=1595291236&site=qq&menu=yes"},"netmusic":{"icon":"/svg/music.svg","link":"https://music.163.com/#/user/home?id=115346351"}}}},"mapped":true,"prev_post":{},"next_post":{}}